<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" InitialTargets="Configure" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
		<CI Condition=" '$(CI)' == '' And '$(Configuration)' == 'Release' ">true</CI>
		<IntermediateOutputPath>.nuget\</IntermediateOutputPath>
		<PackagesPath>$(IntermediateOutputPath)packages</PackagesPath>
		<Out Condition=" '$(Out)' == '' ">out</Out>
		<CommonBuildProperties>WarningLevel=0;NoWarn=1591;RunCodeAnalysis=false;Configuration=$(Configuration);CI=$(CI);DeployExtension=false</CommonBuildProperties>
	</PropertyGroup>

	<ItemGroup>
		<Solution Include="src\*.sln"/>
		<NuSpec Include="src\**\*.nuspec" />
		<TestProject Include="src\**\*Tests.csproj" />
		<SupportedVersion Include="11;12;14" />
	</ItemGroup>

	<Target Name="Clean">
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" Targets="Clean" />
		<Exec Command="rmdir $(Out) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir src\packages /S /Q" ContinueOnError="true" />
		<!-- Remove all bin/obj recursively under /src -->
		<Exec Command='for /d /r . %%d in (bin,obj) do @if exist "%%d" rd /s/q "%%d"' WorkingDirectory='$(MSBuildThisFileDirectory)src' ContinueOnError='true' />
	</Target>

	<Target Name="Rebuild" DependsOnTargets="Clean;Build" />

	<Target Name="Build" Condition=" '@(Solution)' != '' ">
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" />
	</Target>

	<Target Name="Test" DependsOnTargets="Build" Condition=" '@(TestProject)' != '' ">
		<Error Condition=" '$(Configuration)' != 'Release' " Text="Can only run all tests from script for Release configuration, which builds the installer." />

		<Exec Command="msiexec /i src\Clide.Msi\bin\$(Configuration)\Clide.msi /passive" />

		<MSBuild Projects="@(TestProject)" BuildInParallel="false" Targets="GetTargetPath" Properties="$(CommonBuildProperties)">
			<Output TaskParameter="TargetOutputs" ItemName="_TestAssembly" />
		</MSBuild>

		<ItemGroup>
			<TestAssembly Include="@(_TestAssembly)" Condition=" Exists('%(_TestAssembly.FullPath)') " />
		</ItemGroup>

		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />
		<xunit Assemblies="@(TestAssembly)"
			   Html="$(Out)\test.html"
			   Xml="$(Out)\test.xml"
			   ParallelizeAssemblies="true"
			   ParallelizeTestCollections="true"
			   IncludeTraits="$(IncludeTraits)"
			   ExcludeTraits="$(ExcludeTraits)"
			   ContinueOnError="ErrorAndContinue" />

		<Exec Command="msiexec /x src\Clide.Msi\bin\$(Configuration)\Clide.msi /passive" />
	</Target>

	<Target Name="Package" DependsOnTargets="Build" Condition=" '@(NuSpec)' != '' ">
		<MakeDir Directories="$(Out)" Condition=" !Exists('$(Out)') " />
		<Exec Command='"$(NuGet)" Pack "%(NuSpec.Identity)" $(Args) -Version $(Version) -Properties Id=%(NuSpec.Filename);Configuration=$(Configuration) -OutputDirectory $(Out)' />
	</Target>

	<!-- Configure and restore initial targets and packages -->
	<Import Project="src\NuGet.Restore.targets" />
	<PropertyGroup>
		<GitInfoTargets>$(PackagesPath)\GitInfo\build\GitInfo.targets</GitInfoTargets>
		<XunitBuildDir>$(PackagesPath)\xunit.runner.msbuild\build</XunitBuildDir>
		<XunitPlatformDir Condition=" Exists('$(XunitBuildDir)') ">$([System.IO.Directory]::GetDirectories($(XunitBuildDir))[0])</XunitPlatformDir>
		<!-- This file is used to detect whether the restore has been performed or not -->
		<XunitProps>$([System.IO.Path]::Combine($(XunitPlatformDir), 'xunit.runner.msbuild.props'))</XunitProps>
		<PendingRestore Condition=" !Exists('$(GitInfoTargets)') ">true</PendingRestore>
	</PropertyGroup>

	<Target Name="GitVersion" />
	<!-- Gets overriden by the $(GitInfoTargets) if it exists -->
	<Import Project="$(GitInfoTargets)" Condition=" Exists('$(GitInfoTargets)') " />
	<Import Project="$(XunitProps)" Condition="Exists('$(XunitProps)')"/>

	<Target Name="Configure" DependsOnTargets="_GetNuGet;GitVersion">
		<!-- We always run NuGet Install since it already checks for already-installed packages and skips them -->
		<Exec Command='"$(NuGet)" Install "$(MSBuildThisFileDirectory)packages.config" -OutputDirectory "$(PackagesPath)" -ExcludeVersion' />

		<!-- Errors if nuget packages were restored during the build -->
		<Error Text="Required build-time NuGet packages were missing and were just restored. Please run the build again."
			   Condition=" '$(PendingRestore)' == 'true' And '$(target)' != 'configure' "/>

		<PropertyGroup>
			<Version>$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)$(GitSemVerDashLabel)</Version>
		</PropertyGroup>
	</Target>
</Project>
