<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup Condition=" '$(CreateVsixContainer)' == 'true' Or '$(DeployExtension)' == 'true' ">
		<RealIntermediateVsixManifest>$(IntermediateOutputPath)$(VsixManifestFileName)</RealIntermediateVsixManifest>
		<IntermediateVsixManifest>$(RealIntermediateVsixManifest).tmp</IntermediateVsixManifest>
		<CopyVsixManifestFileDependsOn>
			$(CopyVsixManifestFileDependsOn);
			_GitInputs;
			UpdateRealIntermediateVsixManifest;
			ReplaceIntermediateVsixManifest
		</CopyVsixManifestFileDependsOn>
		<GetVsixDeploymentPathDependsOn>
			$(GetVsixDeploymentPathDependsOn);
			_GitInputs;
			GitVersion;
			UpdateRealIntermediateVsixManifest;
			ReplaceIntermediateVsixManifest
		</GetVsixDeploymentPathDependsOn>
		<CreateVsixContainerDependsOn>
			$(CreateVsixContainerDependsOn);
			_GitInputs;
			GitVersion;
			UpdateRealIntermediateVsixManifest;
			ReplaceIntermediateVsixManifest
		</CreateVsixContainerDependsOn>
		<CompileDependsOn>
			_GitInputs;
			GenerateVsixInfo;
			IncludeVsixInfo;
			$(CompileDependsOn)
		</CompileDependsOn>
		<GenerateVsixInfoDependsOn>
			FindSourceVsixManifest;
			GetVsixDeploymentPath;
			GetVsixName;
			EnsureVsixID
		</GenerateVsixInfoDependsOn>
		<ThisVsixInfoFile>$(IntermediateOutputPath)AssemblyInfo.VsixInfo.g$(DefaultLanguageSourceExtension)</ThisVsixInfoFile>
		<Vsix2011>&lt;Namespace Prefix='vs' Uri='http://schemas.microsoft.com/developer/vsx-schema/2011'/&gt;</Vsix2011>
		<Vsix2010>&lt;Namespace Prefix='vs' Uri='http://schemas.microsoft.com/developer/vsx-schema/2010'/&gt;</Vsix2010>
	</PropertyGroup>

	<Target Name="UpdateRealIntermediateVsixManifest"
			Inputs="@(SourceVsixManifest);@(_GitInput)"
			Outputs="$(RealIntermediateVsixManifest)">

		<Copy SourceFiles="$(IntermediateVsixManifest)"
			  DestinationFiles="$(RealIntermediateVsixManifest)" />

		<XmlPeek Namespaces="$(Vsix2011)" XmlInputPath="$(RealIntermediateVsixManifest)" Query="/vs:PackageManifest/vs:Metadata/vs:Identity/@Version"
				 Condition=" '$(VsixCurrentVersion)' == '' ">
			<Output TaskParameter="Result" PropertyName="VsixCurrentVersion" />
		</XmlPeek>
		<XmlPeek Namespaces="$(Vsix2010)" XmlInputPath="$(RealIntermediateVsixManifest)" Query="/vs:Vsix/vs:Identifier/vs:Version/text()"
				 Condition=" '$(VsixCurrentVersion)' == '' ">
			<Output TaskParameter="Result" PropertyName="VsixCurrentVersion" />
		</XmlPeek>

		<PropertyGroup>
			<VsixVersion>$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)</VsixVersion>
		</PropertyGroup>

		<Message Text="Updating VSIX version '$(VsixCurrentVersion)' in '$(RealIntermediateVsixManifest)' to '$(VsixVersion)' since they differ." Importance="normal" />
		<XmlPoke Namespaces="$(Vsix2011)" XmlInputPath="$(RealIntermediateVsixManifest)" Query="/vs:PackageManifest/vs:Metadata/vs:Identity/@Version" Value="$(VsixVersion)" />
		<XmlPoke Namespaces="$(Vsix2010)" XmlInputPath="$(RealIntermediateVsixManifest)" Query="/vs:Vsix/vs:Identifier/vs:Version" Value="$(VsixVersion)" />

		<ItemGroup>
			<FileWrites Include="$(RealIntermediateVsixManifest)" />
		</ItemGroup>

	</Target>

	<Target Name="ReplaceIntermediateVsixManifest">
		<ItemGroup>
			<!-- Remove the .tmp manifest in the VSIX source items used as input for the create VSIX step -->
			<VSIXSourceItem Remove="$(IntermediateVsixManifest)" />
		</ItemGroup>
		<PropertyGroup>
			<IntermediateVsixManifest>$(RealIntermediateVsixManifest)</IntermediateVsixManifest>
		</PropertyGroup>
		<ItemGroup>
			<!-- Add the actual .vsixmanifest now. -->
			<VSIXSourceItem Include="$(IntermediateVsixManifest)" />
		</ItemGroup>
	</Target>

	<Target Name="GetVsixName" DependsOnTargets="GetVsixName2010;GetVsixName2011" />

	<Target Name="GetVsixName2010" Condition=" '$(VsixName)' == '' and Exists('$(IntermediateVsixManifest)') ">
		<XmlPeek Namespaces="$(Vsix2010)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:Vsix/vs:Identifier/vs:Name/text()">
			<Output TaskParameter="Result" PropertyName="VsixName" />
		</XmlPeek>
	</Target>

	<Target Name="GetVsixName2011" Condition=" '$(VsixName)' == '' and Exists('$(IntermediateVsixManifest)') ">
		<XmlPeek Namespaces="$(Vsix2011)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:PackageManifest/vs:Metadata/vs:DisplayName/text()">
			<Output TaskParameter="Result" PropertyName="VsixName" />
		</XmlPeek>
	</Target>

	<!-- This may happen on non-VS2010 VSSDK if the manifest schema is the 2010 one -->
	<Target Name="EnsureVsixID" Condition=" '$(VsixID)' == '' And Exists($(IntermediateVsixManifest)) ">
		<XmlPeek Namespaces="$(Vsix2010)" XmlInputPath="$(IntermediateVsixManifest)" Query="/vs:Vsix/vs:Identifier/@Id">
			<Output TaskParameter="Result" PropertyName="VsixID" />
		</XmlPeek>
	</Target>

	<Target Name="GenerateVsixInfo"
          Inputs="@(_GitInput)"
          Outputs="$(ThisVsixInfoFile)"
          DependsOnTargets="$(GenerateVsixInfoDependsOn)">

		<MakeDir Directories="$(IntermediateOutputPath)" Condition=" !Exists('$(IntermediateOutputPath)') " />
		<WriteLinesToFile File='$(ThisVsixInfoFile)' Lines='[assembly: System.Reflection.AssemblyMetadata("Vsix.Identifier", ThisAssembly.Vsix.Identifier)]' Overwrite='true' />
		<WriteLinesToFile File='$(ThisVsixInfoFile)' Lines='[assembly: System.Reflection.AssemblyMetadata("Vsix.Name", ThisAssembly.Vsix.Name)]' Overwrite='true' />
		<WriteLinesToFile Lines='
partial class ThisAssembly
{
      /// &lt;summary&gt;Identifier: $(VsixID)&lt;/summary&gt;
      public const string Identifier = "$(VsixID)"%3B

      /// &lt;summary&gt;Name: $(VsixName)&lt;/summary&gt;
      public const string Name = "$(VsixName)"%3B
}
' Overwrite='true' File='$(ThisVsixInfoFile)' />

		<ItemGroup>
			<FileWrites Include="$(ThisVsixInfoFile)" />
		</ItemGroup>
	</Target>

	<Target Name="IncludeVsixInfo">
		<ItemGroup>
			<!-- Always include the generated info file -->
			<Compile Include="$(ThisVsixInfoFile)" />
		</ItemGroup>
	</Target>

</Project>