<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Test" InitialTargets="Configure" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="sdk.props" />

  <Target Name="Build" DependsOnTargets="BuildSdk" />
  <Target Name="Push" DependsOnTargets="PushSdk" />
  <Target Name="Clean" DependsOnTargets="CleanSdk;CleanVsix" />

  <Import Project="..\Layout.props" />
  <Import Project="$(SourceDir)NuGet.Restore.targets" />

  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' ==  ''">Debug</Configuration>
  </PropertyGroup>

  <ItemGroup>
    <TestProject Include="Clide.UnitTests\Clide.UnitTests.csproj" />
    <SupportedVersion Include="11.0;12.0;14.0" Condition=" '$(Configuration)' == 'Release' " />
    <SupportedVersion Include="14.0" Condition=" '$(Configuration)' == 'Debug' " />
    <CoveredAssembly Include="Clide" />
  </ItemGroup>

  <Target Name="CleanVsix">
    <ItemGroup>
      <ExtensionDir Include="$(LocalAppData)\Microsoft\VisualStudio\%(SupportedVersion.Identity)Exp\Extensions\ClariusLabs\Clide" />
    </ItemGroup>
    <Exec Command='rd /s /q "%(ExtensionDir.Identity)"' />
  </Target>

  <Target Name="IntegrationTest" DependsOnTargets="GetIntegrationTests;Test" />
  <Target Name="GetIntegrationTests">
    <!-- Build the VSIX for supported VS versions -->
    <Exec Command='"$(MSBuildBinPath)\MSBuild.exe" Clide.Vsix\Clide.Vsix.csproj /v:Minimal /p:Configuration=$(Configuration) /p:VisualStudioVersion=%(SupportedVersion.Identity) /p:DeployExtension=True /t:Build;DeployVsixExtensionFiles'
			  StandardErrorImportance='high'
			  StandardOutputImportance='low'
			  ConsoleToMSBuild='true' />

    <ItemGroup>
      <TestProject Remove="*" />
      <TestProject Include="Clide.IntegrationTests\Clide.IntegrationTests.csproj" />
    </ItemGroup>
  </Target>

  <Target Name="Test" DependsOnTargets="GitInfo;PrepareTest;TestWithoutCoverage;TestWithCoverage">
    <XmlEval XmlInputPath="$(Out)\sdk.xml" Query="sum(/assemblies/assembly/@passed)">
      <Output TaskParameter="Result" PropertyName="Passed" />
    </XmlEval>
    <XmlEval XmlInputPath="$(Out)\sdk.xml" Query="sum(/assemblies/assembly/@failed)">
      <Output TaskParameter="Result" PropertyName="Failed" />
    </XmlEval>
    <PropertyGroup>
      <Images>$(Images)&lt;img src="https://img.shields.io/badge/xunit-$(Passed)-brightgreen.svg" title="Passing tests" /&gt;</Images>
      <Images Condition=" '$(Failed)' != '0' ">$(Images)&lt;img src="https://img.shields.io/badge/xunit-$(Failed)-red.svg" title="Failing tests" /&gt;</Images>
    </PropertyGroup>

    <Message Text="@MonkeyWrench:SetSummary:$(Images)" Importance="high" Condition=" '$(IsCIBuild)' == 'true' " />
    <WriteLinesToFile File="$(Out)\sdk.badges.html" Lines="&lt;html&gt;&lt;body&gt;$(Images)&lt;/body&gt;&lt;/html&gt;" Overwrite="true" Condition=" '$(IsLocalBuild)' == 'true' " />
  </Target>

  <Target Name="PrepareTest" DependsOnTargets="CleanVsix;Build">
    <MSBuild Projects="@(TestProject)" BuildInParallel="false" Targets="GetTargetPath" Properties="Configuration=$(Configuration)">
      <Output TaskParameter="TargetOutputs" ItemName="_TestAssembly" />
    </MSBuild>

    <ItemGroup>
      <TestAssembly Include="@(_TestAssembly)" Condition=" Exists('%(_TestAssembly.FullPath)') " />
    </ItemGroup>

    <MakeDir Directories="$(Out)" Condition=" !Exists('$(Out)') " />
  </Target>

  <PropertyGroup>
    <XunitConsole>$(NuGetPackagesDir)xunit.runner.console\tools\xunit.console.x86.exe</XunitConsole>
    <XunitOptions>$(XunitOptions) -html $(Out)\sdk.html -xml $(Out)\sdk.xml -parallel all -noshadow</XunitOptions>
  </PropertyGroup>

  <Target Name="TestWithoutCoverage" Condition=" '$(ReportCoverage)' != 'true' ">
    <Exec Command="$(XunitConsole) @(TestAssembly, ' ') $(XunitOptions)"
			  ConsoleToMSBuild="true"
			  StandardErrorImportance="high"
			  StandardOutputImportance="normal" />
  </Target>

  <Target Name="TestWithCoverage" Condition=" '$(ReportCoverage)' == 'true' ">
    <PropertyGroup>
      <CoverageConsole>$(NuGetPackagesDir)OpenCover\tools\OpenCover.Console.exe</CoverageConsole>
      <CoverageOptions>$(CoverageOptions) -output:$(Out)\coverage.xml -returntargetcode -register:user -filter:"+[Clide.*]* -[xunit*]* -[*.Tests]* -[*]*ThisAssembly* -[*]*IFluentInterface*" -excludebyattribute:*ExcludeFromCodeCoverage*;*CompilerGenerated* -skipautoprops -showunvisited -mergebyhash -hideskipped:All</CoverageOptions>

      <ReportConsole>$(NuGetPackagesDir)ReportGenerator\tools\ReportGenerator.exe</ReportConsole>
      <ReportOptions>-reports:$(Out)\sdk.coverage.xml -targetdir:$(Out)\coverage -reporttypes:Html;Badges</ReportOptions>
    </PropertyGroup>

    <Exec Command="$(CoverageConsole) $(CoverageOptions) -target:$(XunitConsole) -targetargs:&quot;@(TestAssembly, ' ') $(XunitOptions)&quot;"
			  ConsoleToMSBuild="true"
			  StandardErrorImportance="high"
			  StandardOutputImportance="normal" />

    <XmlPeek XmlInputPath="$(Out)\sdk.coverage.xml" Query="/CoverageSession/Summary/@branchCoverage">
      <Output TaskParameter="Result" PropertyName="BranchCoverage" />
    </XmlPeek>
    <XmlPeek XmlInputPath="$(Out)\sdk.coverage.xml" Query="/CoverageSession/Summary/@maxCyclomaticComplexity">
      <Output TaskParameter="Result" PropertyName="MaxCyclomaticComplexity" />
    </XmlPeek>

    <PropertyGroup>
      <BranchCoverageColor>red</BranchCoverageColor>
      <BranchCoverageColor Condition=" '$(BranchCoverage)' &gt; '70' ">yellow</BranchCoverageColor>
      <BranchCoverageColor Condition=" '$(BranchCoverage)' &gt; '80' ">brightgreen</BranchCoverageColor>
      <MaxCyclomaticComplexityColor>red</MaxCyclomaticComplexityColor>
      <MaxCyclomaticComplexityColor Condition=" '$(MaxCyclomaticComplexity)' &lt; '16' ">yellow</MaxCyclomaticComplexityColor>
      <MaxCyclomaticComplexityColor Condition=" '$(MaxCyclomaticComplexity)' &lt; '11' ">brightgreen</MaxCyclomaticComplexityColor>
    </PropertyGroup>
    <PropertyGroup>
      <Images>$(Images)&lt;img src="https://img.shields.io/badge/coverage-$(BranchCoverage)%-$(BranchCoverageColor).svg" title="Branch code coverage" /&gt;</Images>
      <Images>$(Images)&lt;img src="https://img.shields.io/badge/complexity-$(MaxCyclomaticComplexity)-$(MaxCyclomaticComplexityColor).svg" title="Maximum cyclomatic complexity" /&gt;</Images>
    </PropertyGroup>

    <Exec Command="$(ReportConsole) $(ReportOptions)"
			  ConsoleToMSBuild="true"
			  StandardErrorImportance="high"
			  StandardOutputImportance="normal"
			  Condition=" '' != '' And '$(IsLocalBuild)' == 'true' "/>
  </Target>

  <Target Name="LinkSdkFiles">
    <!-- The goal of this target is to ensure that the VSIX and the integration tests are 
			 running against the exact same assemblies, for purposes of code coverage collection.
			 But code coverage isn't working at all for VSIX integration tests at the moment anyway.
		-->
    <ItemGroup>
      <_SdkFile Include="$(LocalAppData)\Microsoft\VisualStudio\%(SupportedVersion.Identity)Exp\Extensions\ClariusLabs\Clide\*\Clide*.*" />
      <SdkFile Include="@(_SdkFile)" Condition=" Exists('Clide.IntegrationTests\bin\$(Configuration)\%(FileName)%(Extension)') ">
        <Source>$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', 'Clide.IntegrationTests', 'bin', '$(Configuration)', '%(FileName)%(Extension)'))</Source>
      </SdkFile>
    </ItemGroup>

    <Delete Files="@(SdkFile)" />
    <Exec Command="mklink &quot;%(SdkFile.FullPath)&quot; &quot;%(SdkFile.Source)&quot;"
			  StandardErrorImportance="high"
			  StandardOutputImportance="normal"
			  ContinueOnError="true"
			  ConsoleToMSBuild="true" />
  </Target>

  <PropertyGroup>
    <XunitBuildDir>$([System.IO.Path]::Combine($(NuGetPackagesDir), 'xunit.runner.msbuild', 'build'))</XunitBuildDir>
    <XunitPlatformDir Condition=" Exists('$(XunitBuildDir)') ">$([System.IO.Directory]::GetDirectories($(XunitBuildDir))[0])</XunitPlatformDir>
    <!-- This file is used to detect whether the restore has been performed or not -->
    <XunitProps>$([System.IO.Path]::Combine($(XunitPlatformDir), 'xunit.runner.msbuild.props'))</XunitProps>
    <PendingRestore Condition=" !Exists('$(XunitProps)') ">true</PendingRestore>
  </PropertyGroup>
  <Import Project="$(XunitProps)" Condition="Exists('$(XunitProps)')"/>

  <Target Name="Configure" DependsOnTargets="_GetNuGet" Condition=" '$(PendingRestore)' == 'true' ">
    <Exec Command='"$(NuGet)" Install "$(BuildDir)packages.config" -OutputDirectory "$(NuGetPackagesDir.TrimEnd(/).TrimEnd(\))" -ExcludeVersion' />
    <Error Text="Xunit package was missing and was just restored. Please run the build again." Condition=" '$(Target)' != 'Configure' " />
  </Target>

</Project>
